version: '3'

vars:
  APP_ENV: 'dev'
  APP_NAME: 'remind'

tasks:
  default:
    silent: true
    cmds:
      - task --list

  app:deploy:
    desc: 'Deploy Lambda function'
    vars:
      IMAGE:
        sh: aws ecr describe-repositories --repository-names '{{.APP_ENV}}-{{.APP_NAME}}' --query 'repositories[0].repositoryUri' --output text
      IMAGE_TAG: 'latest'
    cmds:
      - task: image:build:final
        vars:
          APP_ENV: '{{.APP_ENV}}'
          IMAGE: '{{.IMAGE}}'
          IMAGE_TAG: '{{.IMAGE_TAG}}'
      - task: image:push
        vars:
          AWS_REGION: '{{.AWS_REGION}}'
          IMAGE: '{{.IMAGE}}'
          IMAGE_TAG: '{{.IMAGE_TAG}}'
      - task: lambda:update
        vars:
          IMAGE: '{{.IMAGE}}'
          IMAGE_TAG: '{{.IMAGE_TAG}}'
          FUNCTION_NAME: '{{.APP_ENV}}-{{.APP_NAME}}'

  app:test:unit:
    desc: 'Execute go test with container image'
    cmds:
      - task: image:build:test
        vars:
          APP_ENV: '{{.APP_ENV}}'
          IMAGE: '{{.APP_ENV}}-{{.APP_NAME}}'
          IMAGE_TAG: 'test'

  app:test:vet:
    desc: 'Execute go vet with container image'
    cmds:
      - task: image:build:vet
        vars:
          APP_ENV: '{{.APP_ENV}}'
          IMAGE: '{{.APP_ENV}}-{{.APP_NAME}}'
          IMAGE_TAG: 'vet'

  image:build:*:
    internal: true
    vars:
      APP_ENV: '{{.APP_ENV}}'
      IMAGE: '{{.IMAGE}}'
      IMAGE_TAG: '{{.IMAGE_TAG}}'
      TARGET_PLATFORM: '{{.TARGET_PLATFORM | default "linux/arm64"}}'
      TARGET_STAGE: '{{index .MATCH 0}}'
    cmds:
      - |
        docker image build \
          --platform {{.TARGET_PLATFORM}} \
          --target {{.TARGET_STAGE}} \
          --build-arg APP_ENV={{.APP_ENV}} \
          -t {{.IMAGE}}:{{.IMAGE_TAG}} .

  image:push:
    internal: true
    vars:
      AWS_REGION: '{{.AWS_REGION | default "ap-northeast-1"}}'
      IMAGE: '{{.IMAGE}}'
      IMAGE_TAG: '{{.IMAGE_TAG}}'
    cmds:
      - |
        aws ecr get-login-password --region {{.AWS_REGION}} \
          | docker login --username AWS --password-stdin {{.IMAGE}}:{{.IMAGE_TAG}} \
          && docker push {{.IMAGE}}:{{.IMAGE_TAG}}

  lambda:update:
    internal: true
    vars:
      IMAGE: '{{.IMAGE}}'
      IMAGE_TAG: '{{.IMAGE_TAG}}'
      FUNCTION_NAME: '{{.FUNCTION_NAME}}'
    cmds:
      - |
        aws lambda update-function-code \
          --function-name {{.FUNCTION_NAME}}\
          --image-uri {{.IMAGE}}:{{.IMAGE_TAG}}
